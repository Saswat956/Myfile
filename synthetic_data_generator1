import pandas as pd
import langchain
from langchain.chat_models import ChatGroq
from langchain.schema import AIMessage
from io import StringIO

# Load input data (CSV or XLSX)
input_file = "input_data.csv"  # Change to your file
input_df = pd.read_csv(input_file)

# Initialize LLM (Groq with LLaMA 3.1)
llm = ChatGroq(model="llama3-70b-8192", temperature=0.7, api_key="your_groq_api_key")

# Get column names for prompt
column_names = ", ".join(input_df.columns)

# Generate synthetic data until it matches input properties
while True:
    # Create prompt for LLM
    prompt = f"""
    Generate synthetic tabular data in CSV format based on the following schema:
    Columns: {column_names}.
    The generated data should match the statistical properties (mean, standard deviation, unique values, distribution) of the input data.
    Ensure no data drift occurs.
    Output only the CSV data.
    """

    # Invoke LLM
    response = llm.invoke(prompt)

    # Extract content from AIMessage
    synthetic_data = response.content.strip()

    # Convert LLM output to DataFrame
    synthetic_df = pd.read_csv(StringIO(synthetic_data))

    # Compute drift by comparing input and generated data
    input_profile = input_df.describe(include="all")
    synthetic_profile = synthetic_df.describe(include="all")

    drift_detected = False

    for col in input_df.columns:
        if col in synthetic_df.columns:
            # Compare mean, std for numerical columns
            if input_df[col].dtype in ['int64', 'float64'] and synthetic_df[col].dtype in ['int64', 'float64']:
                mean_diff = abs(input_profile.loc['mean', col] - synthetic_profile.loc['mean', col])
                std_diff = abs(input_profile.loc['std', col] - synthetic_profile.loc['std', col])
                
                if mean_diff > 0.1 * input_profile.loc['mean', col] or std_diff > 0.1 * input_profile.loc['std', col]:
                    drift_detected = True
                    break
            
            # Compare unique value counts for categorical columns
            elif input_df[col].dtype == 'object':
                unique_diff = abs(input_profile.loc['unique', col] - synthetic_profile.loc['unique', col])
                
                if unique_diff > 0.1 * input_profile.loc['unique', col]:
                    drift_detected = True
                    break

    if not drift_detected:
        break  # Exit loop if data is aligned

# Save final synthetic data
synthetic_df.to_csv("synthetic_data.csv", index=False)
print("Final synthetic data saved as synthetic_data.csv")