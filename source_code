import json
import os
import sys
import boto3
import numpy as np
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.document_loaders import PyPDFDirectoryLoader
from langchain.prompts import PromptTemplate
from langchain.chains import RetrievalQA

## OpenSearch Client
from opensearchpy import OpenSearch

## LangChain OpenSearch Integration
from langchain.vectorstores import OpenSearchVectorSearch

## AWS Bedrock Clients
from langchain_community.embeddings import BedrockEmbeddings
from langchain.llms.bedrock import Bedrock

# Initialize OpenSearch
OPENSEARCH_HOST = "https://your-opensearch-domain"  # Change to your OpenSearch endpoint
INDEX_NAME = "pdf_embeddings"  # Change if needed

opensearch_client = OpenSearch(
    hosts=[OPENSEARCH_HOST],
    http_auth=("admin", "admin"),  # Change credentials
    use_ssl=True,
    verify_certs=False,
)

# Initialize AWS Bedrock
bedrock = boto3.client(service_name="bedrock-runtime")
bedrock_embeddings = BedrockEmbeddings(model_id="amazon.titan-embed-text-v1", client=bedrock)

print("Processing data ingestion and OpenSearch vector store update...")
documents = PyPDFDirectoryLoader("data").load()
text_splitter = RecursiveCharacterTextSplitter(chunk_size=10000, chunk_overlap=1000)
docs = text_splitter.split_documents(documents)

vector_store = OpenSearchVectorSearch.from_documents(
    documents=docs,
    embedding=bedrock_embeddings,
    opensearch_url=OPENSEARCH_HOST,
    index_name=INDEX_NAME,
)
print("Vector store updated successfully in OpenSearch!")

llm = Bedrock(model_id="meta.llama2-70b-chat-v1", client=bedrock, model_kwargs={'max_gen_len': 512})

prompt_template = """
Human: Use the following pieces of context to provide a 
concise answer to the question at the end but summarize with 
at least 250 words with detailed explanations. If you don't know the answer, 
just say that you don't know, don't try to make up an answer.

<context>
{context}
</context>

Question: {question}

Assistant:"""

PROMPT = PromptTemplate(template=prompt_template, input_variables=["context", "question"])

user_question = "Explain the key findings from the PDFs in detail."

retriever = OpenSearchVectorSearch(
    embedding_function=bedrock_embeddings,
    opensearch_url=OPENSEARCH_HOST,
    index_name=INDEX_NAME,
).as_retriever(search_type="similarity", search_kwargs={"k": 3})

qa = RetrievalQA.from_chain_type(
    llm=llm,
    chain_type="stuff",
    retriever=retriever,
    return_source_documents=True,
    chain_type_kwargs={"prompt": PROMPT},
)

answer = qa({"query": user_question})
print("\nLlama2 Output:\n")
print(answer['result'])